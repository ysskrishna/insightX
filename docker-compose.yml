services:
  api:
    build:
      context: ./api
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:dbpassword@db:5432/media_detect
      - AWS_S3_ENDPOINT_URL=http://storage:9000
      - RABBITMQ_HOST=rabbitmq
    ports:
      - "8000:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      storage:
        condition: service_started
      db:
        condition: service_healthy
    restart: on-failure:3
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import urllib.request; urllib.request.urlopen(\"http://localhost:8000/health\")' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  worker:
    build:
      context: ./worker
    environment:
      - RABBITMQ_HOST=rabbitmq
      - API_BASE_URL=http://api:8000
      - AWS_S3_ENDPOINT_URL=http://storage:9000
    depends_on:
      rabbitmq:
        condition: service_healthy
      api:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guestpassword
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
      
  storage:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadminpassword  
    volumes:
      - ./storage:/data
    command: server /data --console-address ":9001"

  db:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=dbpassword
      - POSTGRES_DB=media_detect
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data: